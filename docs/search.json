[
  {
    "objectID": "posts/20220928_github_actions/index.html",
    "href": "posts/20220928_github_actions/index.html",
    "title": "github actions",
    "section": "",
    "text": "GitHub Actions allows you to automate your build, test, and deployment pipeline by continuous integration and continuous delivery (CI/CD).\nYou can create workflows to build and test every pull request to your repository. Whenever an event occurs a workflow is triggered. A workflow contains one or more jobs. In other words: We specify in a workflow what (jobs) should be done when (event).\nA workflow is stored as a YAML file in the .github/workflows directory.\nIn our case we had to modify a predefined workflow from nbdev, because we have to install some non python packages which require root write permissions.\n\n\n\nWe first give the content of the yaml-file and explain its parts afterwards.\nname: stochprog_test\non: [push]\n\npermissions: write-all\n\njobs:\n  build:\n\n    runs-on: ubuntu-20.04\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python 3.8\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.8'\n      - name: install solver\n        run : sudo apt-get install -y libopenmpi-dev glpk-utils\n      - name: poetry install\n        run: |\n          python -m pip install --upgrade pip\n          curl -sSL https://install.python-poetry.org | python3 -\n          poetry install\n      - uses: fastai/workflows/quarto-ghp@master\n      - uses: fastai/workflows/nbdev-ci@master\n\n\nFirst we specify the name of the workflow. The given name will be displayed in the action tab of your github repository.\n\n\n\nThen we specify the events which will trigger the workflow. - for single event use on: push - for multiple events use on: [push, fork] - list of events that trigger workflows - there are many other activity types to trigger a workflow, e.g. issue creation\n\n\n\nWe can modify the permissions granted to the GITHUB_-_TOKEN. For simplicyty we did this for all scopes, but the permissions can be granted to to different scopes and specific jobs.\n\n\n\nA workflow is made of one or more jobs which specify what has to be done. Here build is the name of the job, which is defined afterwards. In the build job we define 1. runs-on: ubuntu-20.04 specifies the type of machine the job runs on 1. steps list the tasks of the job - Each step runs in its own process in the runner environment and has access to the workspace and filesystem. Because steps run in their own process, changes to environment variables are not preserved between steps - uses: uses: fastai/workflows/quarto-ghp@master runs an action of the fastai public repository 1. As the virtual Linux machines run passwordless we can use sudo without providing a password but add option -y to confirm the installation. Put together: run : sudo apt-get install -y libopenmpi-dev glpk-utils\n\n\n\n\n\nchaching dependencies to improve performance"
  },
  {
    "objectID": "posts/jupyter/index.html",
    "href": "posts/jupyter/index.html",
    "title": "jupyter test",
    "section": "",
    "text": "import pyomo.environ as pyo\n\n\nmodel = pyo.ConcreteModel()\n\nmodel.x = pyo.Var([1,2], domain=pyo.NonNegativeReals)\n\nmodel.OBJ = pyo.Objective(expr = 2*model.x[1] + 3*model.x[2])\n\nmodel.Constraint1 = pyo.Constraint(expr = 3*model.x[1] + 4*model.x[2] >= 1)\n\n\nsolver = pyo.SolverFactory('glpk')\n\n\nsolver.solve(model)\n\n{'Problem': [{'Name': 'unknown', 'Lower bound': 0.666666666666667, 'Upper bound': 0.666666666666667, 'Number of objectives': 1, 'Number of constraints': 2, 'Number of variables': 3, 'Number of nonzeros': 3, 'Sense': 'minimize'}], 'Solver': [{'Status': 'ok', 'Termination condition': 'optimal', 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Error rc': 0, 'Time': 0.01656818389892578}], 'Solution': [OrderedDict([('number of solutions', 0), ('number of solutions displayed', 0)])]}\n\n\n\nmodel.pprint()\n\n1 Set Declarations\n    x_index : Size=1, Index=None, Ordered=Insertion\n        Key  : Dimen : Domain : Size : Members\n        None :     1 :    Any :    2 : {1, 2}\n\n1 Var Declarations\n    x : Size=2, Index=x_index\n        Key : Lower : Value             : Upper : Fixed : Stale : Domain\n          1 :     0 : 0.333333333333333 :  None : False : False : NonNegativeReals\n          2 :     0 :               0.0 :  None : False : False : NonNegativeReals\n\n1 Objective Declarations\n    OBJ : Size=1, Index=None, Active=True\n        Key  : Active : Sense    : Expression\n        None :   True : minimize : 2*x[1] + 3*x[2]\n\n1 Constraint Declarations\n    Constraint1 : Size=1, Index=None, Active=True\n        Key  : Lower : Body            : Upper : Active\n        None :   1.0 : 3*x[1] + 4*x[2] :  +Inf :   True\n\n4 Declarations: x_index x OBJ Constraint1"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Add some welcome text.\n\nblog will be mainly about mathematical optimization\nobjects basic notions from stochastic programming (as short high level intro for colleagues with no optimization background)\n\n\n\nLet summarize the steps to reproduce such a blog. This is mainly written for myself to avoid reading multiple\n\nCreate a github repo and clone it with SSH\nCreate conda env and add packages (we use solvers from conda forge)\n\nconda create --name SP_blog python=3.8\nconda install -c conda-forge poetry\npoetry init\npoetry add pandas jupyterlab pyomo\nconda install -c conda-forge ipopt glpk coincbc\n\ncreate quarto blog project\n\nquarto create-project SP_blog --type website:blog\n\nmove content from created folder SP_blog to the root directory\n\n\n\n\n\nmodify quarto.yml\n\nproject:\n  type: website\n  output-dir: docs\n\nadd a .nojekyll to root of repository\n\ntouch .nojekyll\n\nconfigure Github repo add picture\n\n\ngo settings\ngo pages\nselect publish from branch (suggested main) and docs directory deployment can take a while\n\n\n\n\n\nfor a new blog create a folder in the posts folder\ncreate an index.qmd or index.ipynb file with blog content\ninspect result with quarto preview\nrender, commit and push\n\nquarto render\ngit status\ngit add .\ngit commit -m \"commit message\"\ngit push\n\n\n\n\nhttps://quarto.org/docs/publishing/github-pages.html\nhttps://quarto.org/docs/websites/website-blog.html\nhttps://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent"
  },
  {
    "objectID": "posts/20220927_ChanceConstraintsIntro/index.html",
    "href": "posts/20220927_ChanceConstraintsIntro/index.html",
    "title": "Change constraints with examples in pyomo",
    "section": "",
    "text": "In a stochastic program we can put uncertainity also on the constraints. This is called change constraints. we will look at the following types of change constraints:\n\nsingle chance\njoint chance constraints\nindividual chance constraints\n\n\n\nMathematically we can express this as follows:\n\\[\n\\begin{array}{cc}\n\\min_x & c\\cdot x \\\\\ns.t.   & P(Ax\\leq b) \\geq p\\\\\n       & x\\geq 0\n\\end{array}\n\\]\nHere the symbols are denoting the following - \\(x\\in\\mathbb{R}^n\\) the decision variable, - \\(c\\in\\mathbb{R}^n\\) the coefficients in the objective function, - \\(A\\in\\mathbb{R}^{m\\times n}\\) coefficient of the constraints, - \\(b\\in\\mathbb{R}^m\\) the right hand side of the constraints and - \\(p\\in(0,1]\\) is the probability that the constraints (or some of them) may be violated.\n\n\n\nwe can convert a stochastic program with change constraints into a mixed-integer problem as follows: Let \\(S\\) denote the set of scenarios and \\(y_k\\) binary variables for each \\(k\\in S\\), i.e. \\(y_k\\) equals 1 if and only if the constraint is satisfied in the corresponding scenario, then a scenario-based formulation of the above chance constrained stochastic program is given by:\n\\[\n\\begin{array}{cc}\n\\min & c x \\\\\ns.t. & A_kx \\leq b_k + M_k(1-y_k) \\\\\n     & \\sum_{k\\in S} y_k \\geq p\\cdot |S| \\\\\n     & x\\geq0\\\\\n     & y\\in \\{0,1\\}^{|S|}\n\\end{array}\n\\]\nwhere \\(M_k\\in\\mathbb{R}^m\\) is a suitable choosen big-M vector.\n\n\n\n\nimport pyomo.environ as pyo\n\n\nI = [1,2]\nS = [1,2,3,4]\nOmega = {1:1, 2:2, 3:3, 4:4}\nprob = {1:0.25, 2:0.25, 3:0.25, 4:0.25}\np = 0.75\n\n\ndef cc(p, I, S, prob, omega):\n    ## sets\n    m = pyo.ConcreteModel()\n    m.I = pyo.Set(initialize = I)\n    m.S = pyo.Set(initialize = S)\n    \n    ## parameter\n    @m.Param(m.S)\n    def omega(m,s):\n        return Omega[s]\n    \n    @m.Param(m.S)\n    def py(m,s):\n        return prob[s]\n    \n    m.M = pyo.Param(initialize = 10)\n    m.p = pyo.Param(initialize = 1-p, doc = 'risk tolerance')\n    \n    # vars\n    m.x = pyo.Var(m.I, domain = pyo.NonNegativeReals)\n    m.y = pyo.Var(m.S, domain = pyo.Binary)\n    m.cc = pyo.Var(domain = pyo.NonNegativeReals, bounds = (0, m.p))\n    \n    # objective\n    m.OBJ = pyo.Objective(expr = sum(m.x[i] for i in m.I), sense = pyo.minimize)\n    \n    # constraints\n    @m.Constraint(m.S)\n    def c1(m, s):\n        return m.omega[s] * m.x[1] + m.x[2] >= 7 + m.M * (1 - m.y[s])\n    \n    m.cc_def = pyo.Constraint(expr = m.cc == 1 - sum(m.py[k] * m.y[k] for k in m.S))\n    \n    solver = pyo.SolverFactory('glpk')\n    solver.solve(m)\n    \n    return m\n\n\nm = cc(p, I,S,prob,Omega)\nm.pprint()\n\n2 Set Declarations\n    I : Size=1, Index=None, Ordered=Insertion\n        Key  : Dimen : Domain : Size : Members\n        None :     1 :    Any :    2 : {1, 2}\n    S : Size=1, Index=None, Ordered=Insertion\n        Key  : Dimen : Domain : Size : Members\n        None :     1 :    Any :    4 : {1, 2, 3, 4}\n\n4 Param Declarations\n    M : Size=1, Index=None, Domain=Any, Default=None, Mutable=False\n        Key  : Value\n        None :    10\n    omega : Size=4, Index=S, Domain=Any, Default=None, Mutable=False\n        Key : Value\n          1 :     1\n          2 :     2\n          3 :     3\n          4 :     4\n    p : risk tolerance\n        Size=1, Index=None, Domain=Any, Default=None, Mutable=False\n        Key  : Value\n        None :  0.25\n    py : Size=4, Index=S, Domain=Any, Default=None, Mutable=False\n        Key : Value\n          1 :  0.25\n          2 :  0.25\n          3 :  0.25\n          4 :  0.25\n\n3 Var Declarations\n    cc : Size=1, Index=None\n        Key  : Lower : Value : Upper : Fixed : Stale : Domain\n        None :     0 :  0.25 :  0.25 : False : False : NonNegativeReals\n    x : Size=2, Index=I\n        Key : Lower : Value : Upper : Fixed : Stale : Domain\n          1 :     0 :   7.0 :  None : False : False : NonNegativeReals\n          2 :     0 :   0.0 :  None : False : False : NonNegativeReals\n    y : Size=4, Index=S\n        Key : Lower : Value : Upper : Fixed : Stale : Domain\n          1 :     0 :   1.0 :     1 : False : False : Binary\n          2 :     0 :   1.0 :     1 : False : False : Binary\n          3 :     0 :   1.0 :     1 : False : False : Binary\n          4 :     0 :   0.0 :     1 : False : False : Binary\n\n1 Objective Declarations\n    OBJ : Size=1, Index=None, Active=True\n        Key  : Active : Sense    : Expression\n        None :   True : minimize : x[1] + x[2]\n\n2 Constraint Declarations\n    c1 : Size=4, Index=S, Active=True\n        Key : Lower : Body                                : Upper : Active\n          1 :  -Inf :   7 + 10*(1 - y[1]) - (x[1] + x[2]) :   0.0 :   True\n          2 :  -Inf : 7 + 10*(1 - y[2]) - (2*x[1] + x[2]) :   0.0 :   True\n          3 :  -Inf : 7 + 10*(1 - y[3]) - (3*x[1] + x[2]) :   0.0 :   True\n          4 :  -Inf : 7 + 10*(1 - y[4]) - (4*x[1] + x[2]) :   0.0 :   True\n    cc_def : Size=1, Index=None, Active=True\n        Key  : Lower : Body                                                       : Upper : Active\n        None :   0.0 : cc - (1 - (0.25*y[1] + 0.25*y[2] + 0.25*y[3] + 0.25*y[4])) :   0.0 :   True\n\n12 Declarations: I S omega py M p x y cc OBJ c1 cc_def"
  },
  {
    "objectID": "posts/20221004_buildingblog/index.html",
    "href": "posts/20221004_buildingblog/index.html",
    "title": "building blog",
    "section": "",
    "text": "Hamel Husain and Jeremy Howard did a great job with nbdev 2\noften their post start with migration from nbdev 1 or other topics\nto shorten the reading of their posts I am sumarizing their post for myself here\nthere will be some gaps we have to fill which I did not saw while reading or were not mentioned by Hamel Husain and Jeremy Howard"
  },
  {
    "objectID": "posts/20221004_buildingblog/index.html#history",
    "href": "posts/20221004_buildingblog/index.html#history",
    "title": "building blog",
    "section": "history",
    "text": "history\n\nsetup (nbdev project)\n\ninstall quarto (one time)\ncreate conda env + poetry\ncreate empty repo and clone it\npoetry init\npoetry add nbdev notebook\nnbdev_new\ncommit and push to test CI/CD workflows\nset up github pages\nnbdev_install_hooks\nnbdev_export\npip install -e ‘.[dev]’\n\nadd dependencies to github workflow\nunrelevant from nbdev bloging tutorial\n\n   quarto create-project --type website:blog .\n   quarto install extension quarto-ext/video\n\nrelevant from nbdev bloging tutorial\n\ncreate blog directory in the nbs folder\ncreate index.qmd file\nedit _quarto.yml\nquarto publish :\n\nIf using GitHub Pages, commit your files to GitHub before publish your site. No GitHub Actions are needed, you can use quarto publish instead. If you want to automate your workflow with GitHub Actions, you can follow these instructions."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SP_blog",
    "section": "",
    "text": "jupyter\n\n\ntest\n\n\n\n\n\n\n\n\n\n\n\nNov 27, 2022\n\n\ncbarz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nNov 24, 2022\n\n\ncbarz\n\n\n\n\n\n\n\n\n\n\n\n\nuse github actions\n\n\n\n\n\n\nSep 28, 2022\n\n\ncbarz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\njupyter\n\n\ntest\n\n\n\n\n\n\n\n\n\n\n\nSep 27, 2022\n\n\ncbarz\n\n\n\n\n\n\n\n\n\n\n\n\nbuild a blog with quarto and nbdev\n\n\n\n\n\n\nApr 10, 2022\n\n\ncbarz\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]