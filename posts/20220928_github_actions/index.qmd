---
title: github actions
author: cbarz
date: 2022-09-28
description: use github actions
categories: [github]
---

# github actions

## overview

GitHub Actions allows you to automate your build, test, and deployment pipeline by continuous integration and continuous delivery (CI/CD).

You can create *workflows* to build and test every pull request to your repository. Whenever an *event* occurs a *workflow* is triggered. A workflow contains one or more *jobs*. In other words: We specify in a *workflow* what (*jobs*) should be done when (*event*).

A workflow is stored as a YAML file in the `.github/workflows` directory.


In our case we had to modify a predefined workflow from nbdev, because we have to install some non python packages which require root write permissions.



## Example

We first give the content of the `yaml`-file and explain its parts afterwards.

```
name: stochprog_test
on: [push]

permissions: write-all

jobs:
  build:

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: install solver
        run : sudo apt-get install -y libopenmpi-dev glpk-utils
      - name: poetry install
        run: |
          python -m pip install --upgrade pip
          curl -sSL https://install.python-poetry.org | python3 -
          poetry install
      - uses: fastai/workflows/quarto-ghp@master
      - uses: fastai/workflows/nbdev-ci@master
```

### `name` (optional)

First we specify the name of the workflow. The given name will be displayed in the action tab of your github repository.

### `on`

Then we specify the events which will trigger the workflow.
- for single event use `on: push`
- for multiple events use `on: [push, fork]`
- [list of events that trigger workflows](https://docs.github.com/en/articles/events-that-trigger-workflows)
- there are many other activity types to trigger a workflow, e.g. issue creation

### `permmissions`

We can modify the permissions granted to the `GITHUB_-_TOKEN`.
For simplicyty we did this for all scopes, but the permissions can be granted to to different scopes and specific jobs.

### `jobs`

A workflow is made of one or more jobs which specify what has to be done. Here `build` is the name of the job, which is defined afterwards. In the `build` job we define
1. `runs-on: ubuntu-20.04` specifies the type of machine the job runs on
1. `steps` list the tasks of the job
    - Each step runs in its own process in the runner environment and has access to the workspace and filesystem. Because steps run in their own process, changes to environment variables are not preserved between steps
    - `uses: uses: fastai/workflows/quarto-ghp@master` runs an action of the `fastai` public repository
1. As the virtual Linux machines run passwordless we can use `sudo` without providing a password but add option `-y` to confirm the installation. Put together: `run : sudo apt-get install -y libopenmpi-dev glpk-utils`


## To add

- chaching dependencies to improve performance
